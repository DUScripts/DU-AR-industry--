{"slots":{"0":{"name":"slot1","type":{"events":[],"methods":[]}},"1":{"name":"slot2","type":{"events":[],"methods":[]}},"2":{"name":"slot3","type":{"events":[],"methods":[]}},"3":{"name":"slot4","type":{"events":[],"methods":[]}},"4":{"name":"slot5","type":{"events":[],"methods":[]}},"5":{"name":"slot6","type":{"events":[],"methods":[]}},"6":{"name":"slot7","type":{"events":[],"methods":[]}},"7":{"name":"slot8","type":{"events":[],"methods":[]}},"8":{"name":"slot9","type":{"events":[],"methods":[]}},"9":{"name":"slot10","type":{"events":[],"methods":[]}},"-1":{"name":"unit","type":{"events":[],"methods":[]}},"-3":{"name":"player","type":{"events":[],"methods":[]}},"-2":{"name":"construct","type":{"events":[],"methods":[]}},"-4":{"name":"system","type":{"events":[],"methods":[]}},"-5":{"name":"library","type":{"events":[],"methods":[]}}},"handlers":[{"code":"-------------------------------------------------------------------------------------------------------\n--------- AR ULTIMATE INDUSTRY++ MONITORING 3000 by Lord Master Jeronimo Sensei -----------------------\n-------------------------------------------------------------------------------------------------------\n\nhud = true --export: corner hud display\nAR = true --export: augmented reality on / off\nctTextHeight = 0 --export: text height above constainers (in meters)\nindTextHeight = 2 --export: text height above industries (in meters)\nctFontHeight = 150 --export: containers font size\nctFontMagnifierScale = 3 --export: containers name magnifier scale\nctMagnifierRange = 500 --export: distance to container center\nindFontHeight = 200 --export: industries font size\nctfont = \"Play\" --export: containers display font\nindfont = \"Play\" --export: industries display font\nrenderDistance = 35 --export: render distance filter in meter\nfloorsHeight = 6 --export: floors height filter in meter\nfilter = 1 --export: 1 = containers / 2 = industries / 3 = All / 4 = criticals\ndisplay = 1 --export: 1 = All / 2 = same floor / 3 = render distance\ntableFilter = 2 --export: 1 = All / 2 = Schematics warnings / 3 = Input warnings / 4 = none\nmaxPointsDisplayed = 1000 --export: limit for displayed points on screen\nindRunningColor = \"PaleGreen\" --export: tittle color\nindStoppedColor = \"LightPink\" --export: tittle color\nindPausedColor = \"PeachPuff\" --export: tittle color\nindWarningColor = \"Orange\" --export: tittle color\nindCriticalColor = \"Red\" --export: tittle color\n\n-------------------------------------------------------------------------------------------------------\n-------------------------------------------------------------------------------------------------------\nsystem.print(\"Sync Board started\")\ncore = nil\nlocal function findConnectedSlots()\n    local slot = {}\n    for slotName in pairs(unit) do\n        slot = unit[slotName]\n         if type(slot)=='table' and unit[slotName].getClass ~= nil and slotName~='system' and slotName~='library' and slotName~='unit' and slotName~='export' then\n            --system.print(slot.getElementClass())\n            if slot.getClass() == \"CoreUnitStatic\" then\n                core = slot\n                system.print(\"Core found\")\n                coreLocalPos = core.getPosition()\n                corePos = {0,0,0}\n            end\n        end\n    end\nend\nfindConnectedSlots()\nif core == nil then system.print(\"Core needs to be connected!\") unit.exit()end\nunit.hideWidget()\nsystem.showScreen(1)\n\nfps = 0\nuCount = 0\nif hud == true then\n    unit.setTimer(\"fps\",1)\nend\n\n\ndistances = {}\nstarted = false\nloadrun = 0\ncontainers = {}\nindustries = {}\nci = 0\nfi = 0\nunit.setTimer(\"loading\",0.1)\n","filter":{"args":[],"signature":"onStart()","slotKey":"-1"},"key":"0"},{"code":"fps = uCount\nuCount = 0","filter":{"args":[{"value":"fps"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"1"},{"code":"local format, sqrt = string.format, math.sqrt\nlocal mPP = player.getWorldPosition()\nlocal mPPx, mPPy, mPPz = mPP[1], mPP[2], mPP[3]\n\nlocal function normalizeVec(x,y,z)\n    local l = sqrt(x*x + y*y + z*z)\n    return x/l, y/l, z/l\nend\n\nlocal function vectorLen(x,y,z)\n    return sqrt(x * x + y * y + z * z)\nend\n\n\nlocal vx,vy,vz = 0,0,0\nfor i, v in ipairs(containers) do\n    containers[i].text = format(\"%.1f\",(core.getElementMassById(v.id) - v.selfMass)/1000)\nend\nfor i, v in ipairs(industries) do\n    vx,vy,vz = v.pos[1], v.pos[2], v.pos[3]\n    industries[i].data = core.getElementIndustryInfoById(v.id)\n    distances[i] = {i,vectorLen(vx-mPPx,vy-mPPy,vz-mPPz)}\nend\n\ntable.sort(distances, function(a,b)return a[2]>b[2] end)","filter":{"args":[{"value":"data"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"2"},{"code":"local format, sqrt = string.format, math.sqrt\nlocal cWP = construct.getWorldPosition()\nlocal cWPx, cWPy, cWPz = cWP[1], cWP[2], cWP[3]\nlocal cWOU = construct.getWorldOrientationUp()\nlocal cWOUx, cWOUy, cWOUz = cWOU[1], cWOU[2], cWOU[3]\nlocal cWOF = construct.getWorldOrientationForward()\nlocal cWOFx, cWOFy, cWOFz = cWOF[1], cWOF[2], cWOF[3]\nlocal cWOR = construct.getWorldOrientationRight()\nlocal cWORx, cWORy, cWORz = cWOR[1], cWOR[2], cWOR[3]\nlocal mPP = player.getWorldPosition()\nlocal mPPx, mPPy, mPPz = mPP[1], mPP[2], mPP[3]\nlocal x,y,z = 0,0,0\nlocal function local2World(vx,vy,vz)\n    x = vx * cWORx + vy * cWOFx + vz * cWOUx + cWPx\n    y = vx * cWORy + vy * cWOFy + vz * cWOUy + cWPy\n    z = vx * cWORz + vy * cWOFz + vz * cWOUz + cWPz\n    return x,y,z\nend\n\nlocal elements = core.getElementIdList()\nlocal ne = #elements\n\nlocal loadMin = loadrun * 500 < ne and loadrun * 500 or ne\nloadrun = loadrun + 1\nlocal loadMax = loadrun * 500 < ne and loadrun * 500 or ne\n\nlocal hub = false\nfor i=loadMin, loadMax, 1 do\n    --system.print(i)\n    local v = elements[i]\n    local class = core.getElementDisplayNameById(v)\n    local name = core.getElementNameById(v)\n    local data = system.getItem(core.getElementItemIdById(v))\n    --system.print(class)\n    if string.match(class:lower(), \"container\") then\n        if string.match(class:lower(), \"hub\") then\n\n        else\n            if system.getItem(tonumber(name)).name ~= \"InvalidItem\" then name = system.getItem(tonumber(name)).name end \n            ci = ci+1\n            local lp = core.getElementPositionById(v)\n            local lpx, lpy, lpz = lp[1], lp[2], lp[3]+ctTextHeight  \n            containers[ci] = {id = v, text = \"0\", selfMass = data.unitMass, localPos = core.getElementPositionById(v), pos = {local2World(lpx, lpy, lpz)}, name = name}\n        end\n    end\n    if string.match(class:lower(), \"refiner\") \n        or string.match(class:lower(), \"assembly\")\n        or string.match(class:lower(), \"smelter\")\n        or string.match(class:lower(), \"chemical\")\n        or string.match(class:lower(), \"metalwork\")\n        or string.match(class:lower(), \"printer\")\n        or string.match(class:lower(), \"honeycomb\")\n        or string.match(class:lower(), \"recycler\")\n        or string.match(class:lower(), \"industry\")\n        or string.match(class:lower(), \"furnace\")\n        or string.match(class:lower(), \"electronics\")then\n        fi = fi+1\n        local lp = core.getElementPositionById(v)\n        local lpx, lpy, lpz = lp[1], lp[2], lp[3]+indTextHeight\n        industries[fi] = {id = v, text = \"0\", data = core.getElementIndustryInfoById(v), localPos = core.getElementPositionById(v), pos = {local2World(lpx, lpy, lpz)}, name = name}\n    end\nend\n\nif loadMax == ne then\n    system.print(\"Containers found: \"..#containers)\n    system.print(\"Industries found: \"..#industries)\n    unit.setTimer(\"data\",1)\n    started = true\n    system.print(\"script started!\")\n    unit.stopTimer(\"loading\")\nend","filter":{"args":[{"value":"loading"}],"signature":"onTimer(tag)","slotKey":"-1"},"key":"3"},{"code":"if started == true then\n    local points = 0\n    local sgt = system.getArkTime()\n    local vel = vec3(construct.getWorldVelocity())\n    if vel:len()*3.6 < 50 then\n        local sqrt, tan, rad, format, concat, floor, abs, sign = math.sqrt, math.tan, math.rad, string.format, table.concat, math.floor, math.abs, utils.sign\n        local sw = system.getScreenWidth()\n        local sh = system.getScreenHeight()\n        local vFov = system.getCameraVerticalFov()\n        local near = 0.1\n        local far = 100000000.0\n        local aspectRatio = sh/sw\n        local tanFov = 1.0/tan(rad(vFov)*0.5)\n        local field = -far/(far-near)\n        local af = aspectRatio*tanFov\n        local nq = near*field\n\n        local camWP = system.getCameraWorldPos()\n        local camWPx, camWPy, camWPz = camWP[1], camWP[2], camWP[3]\n        local camWF = system.getCameraWorldForward()\n        local camWFx, camWFy, camWFz = camWF[1], camWF[2], camWF[3]\n        local camWR = system.getCameraWorldRight()\n        local camWRx, camWRy, camWRz = camWR[1], camWR[2], camWR[3]\n        local camWU = system.getCameraWorldUp()\n        local camWUx, camWUy, camWUz = camWU[1], camWU[2], camWU[3]\n\n        local cWP = construct.getWorldPosition()\n        local cWPx, cWPy, cWPz = cWP[1], cWP[2], cWP[3]\n        local cWOU = construct.getWorldOrientationUp()\n        local cWOUx, cWOUy, cWOUz = cWOU[1], cWOU[2], cWOU[3]\n        local cWOF = construct.getWorldOrientationForward()\n        local cWOFx, cWOFy, cWOFz = cWOF[1], cWOF[2], cWOF[3]\n        local cWOR = construct.getWorldOrientationRight()\n        local cWORx, cWORy, cWORz = cWOR[1], cWOR[2], cWOR[3]\n        local mPP = player.getPosition()\n        local mPPx, mPPy, mPPz = mPP[1], mPP[2], mPP[3]\n\n        local posX, posY, posZ = 0, 0, 0\n        local vx, vy, vz = 0, 0, 0\n        local sx, sy, sz = 0, 0, 0\n        local sPX, sPY = 0\n        local dist = 0\n\n        local function projection2D()\n            vx = posX * camWRx + posY * camWRy + posZ * camWRz\n            vy = posX * camWFx + posY * camWFy + posZ * camWFz\n            vz = posX * camWUx + posY * camWUy + posZ * camWUz\n            sx = (af * vx)/vy\n            sy = ( -tanFov * vz)/vy\n            sz = ( -field * vy + nq)/vy\n            sPX, sPY = (sx+1)*sw*0.5, (sy+1)*sh*0.5 -- screen pos X Y\n            dist = sqrt(posX*posX + posY*posY + posZ*posZ) -- distance from camera to pos\n        end\n\n        local function SecondsToClock(seconds)\n            local seconds = tonumber(seconds)\n            if seconds <= 0 or floor(seconds/3600) > 24 then\n                return \"00:00:00\"\n            else\n                local hours = format(\"%02.f\", floor(seconds/3600))\n                local mins = format(\"%02.f\", floor(seconds/60 - (hours*60)))\n                local secs = format(\"%02.f\", floor(seconds - hours*3600 - mins *60))\n                return hours..\"h:\"..mins..\"m:\"..secs..\"s\"\n            end\n        end    \n\n        local SVG = [[\n        <style>\n        .label {text-anchor: middle; font-family: ]]..ctfont..[[; alignment-baseline: middle; stroke-width: 0; fill: white; outline: 2px solid gold; outline-offset: 5px;} \n        .hud {text-anchor: start; font-family: Play; alignment-baseline: middle; stroke-width: 2; fill: red;}\n        .containers {text-anchor: middle; font-family: ]]..ctfont..[[; alignment-baseline: middle; stroke-width: 0; fill: white;}\n        .industries {text-anchor: middle; font-family: Play; alignment-baseline: middle; stroke-width: 0; fill: white;}\n        .industriesRunning {stroke-width: 0; fill: ]]..indRunningColor..[[; fill-opacity: 0.85} \n        .industriesStopped {stroke-width: 0; fill: ]]..indStoppedColor..[[; fill-opacity: 0.85} \n        .industriesPaused {stroke-width: 0; fill: ]]..indPausedColor..[[; fill-opacity: 0.85}\n        .industriesWarning {stroke-width: 0; fill: ]]..indWarningColor..[[; fill-opacity: 0.9} \n        .industriesCritical {stroke-width: 0; fill: ]]..indCriticalColor..[[; fill-opacity: 0.9} \n        .boxText {text-anchor: left; font-family: ]]..indfont..[[; alignment-baseline: bottom; stroke-width: 0; fill: DimGrey; fill-opacity: 0.6}\n        .boxTittle {text-anchor: middle; font-family: ]]..indfont..[[; alignment-baseline: middle; stroke-width: 0; fill: white; fill-opacity: 0.9} \n        .whiteBG {stroke-width: 0; fill: white; fill-opacity: 0.7}\n        </style>]]\n\n        --Markers\n        ----------\n        local style = \"label\"\n        local fs = fontHeight\n        local svgT = {}\n        local ind = 0\n        local n1, n2, n3 = 0, 0, 0\n        local data = {}\n        local cargo = 0\n        local ty = 0\n\n        style = \"containers\"\n        if (filter == 1 or filter == 3) and AR == true then\n            for i, v in ipairs(containers) do\n                posX = v.pos[1] - camWPx\n                posY = v.pos[2] - camWPy\n                posZ = v.pos[3] - camWPz\n                projection2D()\n                if sz < 1 and sPX > 0 and sPX < sw and sPY > 0  and sPY < sh and (display == 1 or (display == 3 and dist < renderDistance) or (display == 2 and v.localPos[3]-mPPz < floorsHeight and sign(v.localPos[3]-mPPz+indTextHeight) >= 0)) and points < maxPointsDisplayed then\n                    ind = ind +1\n                    local ftScale = 1\n                    if sqrt(((sw/2)-sPX)^2 + ((sh/2)-sPY)^2) < 1 /  dist * ctMagnifierRange then ftScale = ctFontMagnifierScale end\n                    ty = 1 / dist * ctFontHeight * ftScale\n                    svgT[ind] = format([[<text \n                        x=\"%.1f\" \n                        y=\"%.1f\" \n                        class=\"%s\" \n                        font-size=\"%.1f\"\n                        >\n                        %s\n                        <tspan x=\"%.2f\" y=\"%.2f\">%stons</tspan>    \n                        </text>]], \n                        sPX, \n                        sPY, \n                        style, \n                        ty,\n                        v.name,\n                        sPX,\n                        sPY + ty + ty/2,\n                        v.text\n                    )\n                    points = points + 1\n                end\n            end\n        end\n\n        local indName = \"\"\n        local indState = \"\"\n        local indSchematicRem = 0\n        local indWarning = {}\n        local indCritical = {}\n        local indw = 0\n        local indc = 0\n\n        style = \"industries\"\n        local critical = false\n        if filter == 2 or filter == 3 or filter == 4 then\n            for i, w in ipairs(distances) do\n                local v = industries[w[1]] \n                posX = v.pos[1] - camWPx\n                posY = v.pos[2] - camWPy\n                posZ = v.pos[3] - camWPz\n                projection2D()\n                if v.data.state == 1 then indState = \"Stopped\" style = \"industriesStopped\" critical = false\n                elseif v.data.state == 2 then indState = \"Running\" style = \"industriesRunning\" critical = false \n                elseif v.data.state == 3 then indState = \"Missing input\" style = \"industriesWarning\" indw = indw + 1 indWarning[indw] = v indWarning[indw].warning = indState critical = true\n                elseif v.data.state == 4 then indState = \"Missing output capacity\" style = \"industriesPaused\" critical = false    \n                elseif v.data.state == 5 then indState = \"Missing output container\" style = \"industriesPaused\" critical = false       \n                elseif v.data.state == 6 then indState = \"Pending\" style = \"industriesPaused\" critical = false  \n                elseif v.data.state == 7 then indState = \"Missing Schematic\" style = \"industriesCritical\" indc = indc + 1 indCritical[indc] = v  indCritical[indc].warning = indState critical = true    \n                end\n                if sz < 1 and sPX > 0 and sPX < sw and sPY > 0  and sPY < sh and (filter == 2 or filter == 3 or (filter == 4 and critical == true)) and (display == 1 or (display == 3 and dist < renderDistance) or (display == 2 and v.localPos[3]-mPPz < floorsHeight and sign(v.localPos[3]-mPPz+indTextHeight) >= 0)) and points < maxPointsDisplayed and AR == true then\n                    ind = ind +1\n                    ty = 1 / dist * indFontHeight\n                    local bw, bh = 1 / dist * 2500, 1 / dist * 300\n                    local tbw, tbh = bw, 1 / dist * 1000\n                    local gape = 1 / dist * 50\n                    local batch = [[<tspan x=\"%.2f\" dy=\"%s\">Batch: %s/%s</tspan>]]\n                    local b1, b2 = v.data.batchesRemaining, v.data.batchesRequested\n                    if b2 == 0 and v.data.maintainProductAmount == 0 then\n                        batch = [[<tspan x=\"%.2f\" dy=\"%s\">Unlimited Producti%s%s</tspan>]]\n                        b1, b2 = \"o\", \"n\" \n                    elseif v.data.maintainProductAmount > 0 then\n                        batch = [[<tspan x=\"%.2f\" dy=\"%s\">Maintain: %.0f/%.0f</tspan>]]\n                        b1, b2 = v.data.currentProductAmount, v.data.maintainProductAmount\n                    end\n                    --indState = v.data.state --== 1 and \"Running\" or \"Stopped\"\n                    indSchematicRem = tostring(v.data.schematicsRemaining)\n                    svgT[ind] = format([[\n                        <rect x=\"%.2f\" y=\"%.2f\" width=\"%.0f\" height=\"%.0f\" class=\"%s\"/>\n                        <rect x=\"%.2f\" y=\"%.2f\" width=\"%.0f\" height=\"%.0f\" class=\"%s\"/>\n                        <text x=\"%.1f\" y=\"%.1f\" class=\"%s\" font-size=\"%.1f\"> %s </text>\n                        <text x=\"%.1f\" y=\"%.1f\" class=\"%s\" font-size=\"%.1f\"> %s\n                        <tspan x=\"%.2f\" dy=\"%s\">Schematics: %s</tspan>\n                        ]]..batch..[[\n                        <tspan x=\"%.2f\" dy=\"%s\">Time: %s</tspan> \n                        </text>\n                        ]], \n                        sPX-bw/2, sPY-bh/2, bw, bh, style,  \n                        sPX-bw/2, sPY+bh/2+gape, tbw, tbh, \"whiteBG\", \n                        sPX,sPY,\"boxTittle\", ty, string.sub(v.name:upper(),1,20),\n                        sPX-bw/2+gape,sPY+bh+gape*2,\"boxText\", ty, indState,\n                        sPX-bw/2+gape,\"1.2em\", indSchematicRem,\n                        sPX-bw/2+gape,\"1.2em\", b1, b2,\n                        sPX-bw/2+gape,\"1.2em\", SecondsToClock(v.data.remainingTime)\n                    )\n\n                    points = points + 1\n                end\n            end \n        end\n\n        local tSVG = \"\"\n        local wSVG = \"\"\n        local cSVG = \"\"\n        if indw+indc ~= 0 and tableFilter ~= 4 then\n            local warnTot = 0\n            if tableFilter == 1 then warnTot = indw+indc\n            elseif tableFilter == 2 then warnTot = indc\n            elseif tableFilter == 3 then warnTot = indw\n            end    \n            tSVG = [[<table height=]].. 15/warnTot+1 ..[[% border=1>\n            <tr >\n            <td height=]].. 100/warnTot ..[[% width=100% align=\"left\" valign=\"center\" style=\"background-color:red;\">\n            <p style=\"font-size: 1em; color:white; font-family:Play; \">\n            INDUSTRIES WITH ALARMING STATE: ]].. warnTot ..[[\n            </p>\n            </td>\n            </tr>]]\n            if tableFilter == 1 or tableFilter == 2 then\n                for i, v in ipairs(indCritical) do\n                    cSVG = cSVG ..[[<tr>\n                    <td height=]].. 100/warnTot ..[[% width=100% align=\"left\" valign=\"center\">\n                    <p style=\"font-size: 1em; color:red; font-family:Play;\">\n                    ]].. v.name ..[[: ]].. v.warning ..[[\n                    </p>\n                    </td>\n                    </tr>]]     \n                end\n            end\n            if tableFilter == 1 or tableFilter == 3 then\n                for i, v in ipairs(indWarning) do\n                    wSVG = wSVG ..[[<tr>\n                    <td height=]].. 100/warnTot ..[[% width=100% align=\"left\" valign=\"center\">\n                    <p style=\"font-size: 1em; color:red; font-family:Play;\">\n                    ]].. v.name ..[[: ]].. v.warning ..[[\n                    </p>\n                    </td>\n                    </tr>]]     \n                end\n            end\n            tSVG = tSVG .. cSVG .. wSVG ..[[</table>]]\n        end\n\n\n        SVG = SVG .. concat(svgT)\n        style = \"hud\"\n\n        if hud == true then\n            local cFilterStatus = \"\"\n            if filter == 1 then cFilterStatus = \"Containers only\"\n            elseif filter == 2 then cFilterStatus = \"Industries only\"  \n            elseif filter == 3 then cFilterStatus = \"All\" \n            elseif filter == 4 then cFilterStatus = \"Critical Only\"\n            end\n            local dFilterStatus = \"\"\n            if display == 1 then dFilterStatus = \"All\"\n            elseif display == 2 then dFilterStatus = \"Same floor only\"  \n            elseif display == 3 then dFilterStatus = \"Render distance only: \"..renderDistance \n            end\n            local tFilterStatus = \"\"\n            if tableFilter == 1 then tFilterStatus = \"All\"\n            elseif tableFilter == 2 then tFilterStatus = \"Missing Schematics only\"  \n            elseif tableFilter == 3 then tFilterStatus = \"Missing Input only\" \n            elseif tableFilter == 4 then tFilterStatus = \"None\"\n            end\n            SVG = SVG .. [[<text x=\"20\" y=\"20\" class=\"hud\" font-size=\"20\" >AR Industry++ - by Jeronimo 2022</text>]] \n            SVG = SVG .. [[<text x=\"20\" y=\"40\" class=\"hud\" font-size=\"20\" >FPS: ]].. fps ..[[</text>]] \n            SVG = SVG .. [[<text x=\"20\" y=\"60\" class=\"hud\" font-size=\"20\" >AR points displayed: ]].. ind ..[[</text>]]\n            SVG = SVG .. [[<text x=\"20\" y=\"80\" class=\"hud\" font-size=\"20\" >ALT + 1 category filter: ]].. cFilterStatus ..[[</text>]]\n            SVG = SVG .. [[<text x=\"20\" y=\"100\" class=\"hud\" font-size=\"20\" >ALT + 2 display filter: ]].. dFilterStatus ..[[</text>]]\n            SVG = SVG .. [[<text x=\"20\" y=\"120\" class=\"hud\" font-size=\"20\" >ALT + 3 table filter: ]].. tFilterStatus ..[[</text>]]\n            SVG = SVG .. [[<text x=\"20\" y=\"140\" class=\"hud\" font-size=\"20\" >ALT + 4: Restart Script</text>]]\n            SVG = SVG .. [[<text x=\"20\" y=\"160\" class=\"hud\" font-size=\"20\" >ALT + 5 AR: ]]..tostring(AR)..[[</text>]]\n        end\n\n        html = [[\n        <style>\n        svg {\n        position:absolute;\n        top:0px;\n        left:0px\n        }\n        </style>\n        <div style=\"left:20px; top:180px; position:absolute; width:100%; height:100%\">  \n        ]].. tSVG ..[[\n        </div>\n        <div>\n        <svg viewBox=\"0 0 ]].. sw ..[[ ]].. sh ..[[\">\n        ]].. SVG ..[[\n        </svg>\n        </div>\n        ]]\n\n        system.setScreen(html)\n    else system.setScreen(\"\")\n    end\n    uCount = uCount + 1\nelse system.setScreen(\"\")\nend","filter":{"args":[],"signature":"onUpdate()","slotKey":"-4"},"key":"4"},{"code":"filter = filter < 4 and filter + 1 or 1","filter":{"args":[{"value":"option1"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"5"},{"code":"display = display < 3 and display + 1 or 1","filter":{"args":[{"value":"option2"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"6"},{"code":"tableFilter = tableFilter < 4 and tableFilter + 1 or 1","filter":{"args":[{"value":"option3"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"7"},{"code":"started = false\nloadrun = 0\ncontainers = {}\nindustries = {}\nci = 0\nfi = 0\nunit.setTimer(\"loading\",0.1)","filter":{"args":[{"value":"option4"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"8"},{"code":"AR =  not AR","filter":{"args":[{"value":"option5"}],"signature":"onActionStart(action)","slotKey":"-4"},"key":"9"}],"methods":[],"events":[]}
